//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Core/Input System/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Prototype"",
            ""id"": ""4eaac555-a6bc-4f84-a2be-6b80a9609a7f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4a7e7e1c-3177-429c-863b-16fb3b2f4a45"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ac6fb8bd-2239-44c9-b56e-b792dd875e57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""e56c52bc-ea86-48c1-bd5c-80844ea3eadd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""6b6ad8c9-1324-466e-bca0-894abe3e2e9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""936a1664-2fd1-49cd-8319-801cbd2cde8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d1019de7-3d19-4a58-89f3-98dd60122025"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""50d26625-26b5-4eeb-96a3-cb9108fb3d58"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9e1c2913-237c-4974-a125-965198808008"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bc4e7322-bc78-4df1-8827-ab75449d6d30"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""30dc34ad-3c63-4c7d-9f04-71d01c4b418c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0d0a2078-f0de-48c9-a964-fb4030773b51"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f6fe11a-f5c6-4944-bd4b-7033291434c6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a57ec60d-0194-41de-b4a7-740f1a95cadd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0bfaabfc-44a6-4b21-b4d2-8e2f287c3c5c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""df964267-e9ad-41a5-b1c5-6cadad0f30da"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a133d4e-eac5-440a-8345-19b01a620660"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f82df64-cc9e-4028-bc50-ee7b9842839d"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb8a1da7-35fd-4d32-92af-fca3a348e26f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c139614-aeb1-4f17-933d-22fbff500ce1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Prototype
        m_Prototype = asset.FindActionMap("Prototype", throwIfNotFound: true);
        m_Prototype_Movement = m_Prototype.FindAction("Movement", throwIfNotFound: true);
        m_Prototype_Jump = m_Prototype.FindAction("Jump", throwIfNotFound: true);
        m_Prototype_Crouch = m_Prototype.FindAction("Crouch", throwIfNotFound: true);
        m_Prototype_Aim = m_Prototype.FindAction("Aim", throwIfNotFound: true);
        m_Prototype_Shoot = m_Prototype.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Prototype
    private readonly InputActionMap m_Prototype;
    private IPrototypeActions m_PrototypeActionsCallbackInterface;
    private readonly InputAction m_Prototype_Movement;
    private readonly InputAction m_Prototype_Jump;
    private readonly InputAction m_Prototype_Crouch;
    private readonly InputAction m_Prototype_Aim;
    private readonly InputAction m_Prototype_Shoot;
    public struct PrototypeActions
    {
        private @InputActions m_Wrapper;
        public PrototypeActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Prototype_Movement;
        public InputAction @Jump => m_Wrapper.m_Prototype_Jump;
        public InputAction @Crouch => m_Wrapper.m_Prototype_Crouch;
        public InputAction @Aim => m_Wrapper.m_Prototype_Aim;
        public InputAction @Shoot => m_Wrapper.m_Prototype_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Prototype; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PrototypeActions set) { return set.Get(); }
        public void SetCallbacks(IPrototypeActions instance)
        {
            if (m_Wrapper.m_PrototypeActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnCrouch;
                @Aim.started -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnAim;
                @Shoot.started -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PrototypeActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_PrototypeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public PrototypeActions @Prototype => new PrototypeActions(this);
    public interface IPrototypeActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
